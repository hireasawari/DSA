#include<stdio.h>
#include<stdlib.h>
#include<math.h>

struct node{
    int data;
    struct node *left;
    struct node*right;
    int height;
};


struct node createNode(int data){
    struct node *newNode=(struct node*)malloc(sizeof(struct node));
    newNode->data=data;
    newNode->right=NULL;
    newNode->left=NULL;
    newNode->height=1;
    return newNode;
}

int getHeight(struct node *node){
    if(node==NULL){
        return 0;
    }
    else{
        return node->height;
    }
}

int getBF(struct node *node){
    return getHeight(node->left)-getHeight(node->right);
}


struct node *leftRotate(struct node *y){                         //left rotate
    struct node *x=y->left;
    struct node *t2=x->right;
      
    x->right=y;
    y->left=t2;
    
    y->height=max(getHeight(y->left),getHeight(y->right))+1;
    x->height=max(getHeight(x->left),getHeight(x->right))+1;
    
    return x;
    
}

struct node *rightRotate(struct node *x){                         //right rotate
    struct node *y=x->right;
    struct node *t2=y->left;
      
    y->left=x;
    x->right=t2;
    
    y->height=max(getHeight(y->left),getHeight(y->right))+1;
    x->height=max(getHeight(x->left),getHeight(x->right))+1;
    
    return y;
    
}

struct node *insert(struct node *root,int data){
    
    if(root==NULL){
        return createNode(data);
    } 
    
    
    if(data<root->data){
        root->left=insert(root->left,data);
    }
    else if(data>root->data){
        root->right=insert(root->right,data);
    }
    return root;
    
    int node->height=1+max(getHeight(node->left),getHeight(node->right));
    int bf=getBF(root);
    
    
    //1. left-left
    if(bf>1 && root-> )
    
    
}

















