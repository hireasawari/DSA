#include<stdio.h>
#include<stdlib.h>

struct maxHeap{
    int *arr;
    int size;
    int maxsize;
};

void swap(int *a,int *b){
    int temp=*a;
    *a=*b;
    *b=temp;
}

void initialiseHeap(struct maxHeap* h,int n){
    h->maxsize=n;
    h->size=0;
    h->arr=(int *)malloc(sizeof(int)*n);
}

void display(struct maxHeap *h){
    printf("Display: ");
    for(int i=0;i<h->size;i++){
        printf(" %d ",h->arr[i]);
    }
}

void insert ( struct maxHeap *h,int value){
    
    if(h->size==h->maxsize){
        printf("Heap overflow");
        return;
    }
    
    h->arr[h->size]=value;
    int i=h->size;
    h->size++;
    
    while(i>0 && h->arr[(i-1)/2]<h->arr[i] ){                               //(i-1/2)->parent of i
      swap(&h->arr[(i-1)/2],&h->arr[i]);
      i=(i-1)/2;
    }
    
    display(h);
    printf("\n");
}

void heapify(struct maxHeap *h,int index){
    int largest=index;
    int left=2*index+1;
    int right=2*index+2;
    
    if(h->size>left && h->arr[largest]<h->arr[left]){
        largest=left;
    }
    if(h->size>right && h->arr[largest]<h->arr[right]){
        largest=right;
    }
    
    if(largest!=index){
        swap(&h->arr[largest],&h->arr[index]);
        heapify(h,largest);
    }
}


void swapdelheap(struct maxHeap *h ){
    int origsize=h->size;
    
    for(int i=h->size-1;i>0;i--){
        swap(&h->arr[0],&h->arr[i]);
        h->size--;
        heapify(h,0);
    }
    h->size=origsize;
    display(h);
    
}



int main(){
    struct maxHeap *h = (struct maxHeap*)malloc(sizeof(struct maxHeap));
    int n,data;
    printf("Enter no.of elements : ");
    scanf(" %d",&n);
    initialiseHeap(h,n);
    
    printf("Enter elements : ");
    for(int i=0;i<n;i++){
        scanf("%d",&data);
        insert(h,data);
    }
    
    swapdelheap(h);
    
    
    
}
