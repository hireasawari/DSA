#include<stdio.h>
#include<stdlib.h>

struct queue {
    int size;
    int front;
    int rear;
    int *arr;
};

int isfull(struct queue *q) {
    if (q->rear == q->size - 1) {
        return 1;
    }
    return 0;
}

int isempty(struct queue *q) {
    if (q->rear == q->front) {
        return 1;
    }
    return 0;
}

void enqueue(struct queue *q, int value) {
    if (isfull(q)) {
        printf("Queue overflow. Cannot add new element.\n");
    } else {
        q->rear++;
        q->arr[q->rear] = value;
        printf("%d is added to the queue.\n", value);
    }
}

int dequeue(struct queue *q) {
    int a = -1;
    if (isempty(q)) {
        printf("Queue underflow. Cannot remove element.\n");
        return a;
    } else {
        q->front++;
        a = q->arr[q->front];  // Correctly return the value at the front
        return a;
    }
}

int main() {
    struct queue q;
    q.size = 10;
    q.front = -1;     // made the queue empty
    q.rear = -1;
    q.arr = (int*)malloc(q.size * sizeof(int)); // dynamic memory allocation

    if (q.arr == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);

    printf("\nDequeued element: %d\n", dequeue(&q));
    return 0;
}
